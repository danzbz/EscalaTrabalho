@model EscalaTrabalho.Model.CalendarioMOD

<table id="eventos" class="d-none">
    @foreach (var dia in Model.ListaDiasUteis)
    {
        @foreach (var funcionario in dia.ListaFuncionarioNaEscala)
        {
            <tr>
                <td>@funcionario.Id</td>
                <td>@funcionario.NmFuncionario</td>
                <td>@dia.DtInicio.ToString("yyyy-MM-dd")</td>
            </tr>
        }
    }
</table>

<table id="eventosFeriados" class="d-none">
    @foreach (var feriado in Model.ListaFeriadoPublico)
    {
        <tr>
            <td>@feriado.Global</td>
            <td>@feriado.LocalName</td>
            <td>@feriado.Date.ToString("yyyy-MM-dd")</td>
        </tr>
    }
</table>

<div class="row">

    <div class="col-12">
        <table class="table">
            <thead>
                <tr>
                    <td>ID</td>
                    <td>
                        Colaborador
                    </td>
                    <td>Qtd. de Homes</td>
                </tr>

                @foreach (var funcionario in Model.ListaFuncionario)
                {
                    <tr>
                        <td>@funcionario.Id</td>
                        <td id="colaborador-@funcionario.Id">
                            @funcionario.NmFuncionario
                        </td>
                        <td id="homes-@funcionario.Id">
                            @Model.ListaDiasUteis.Where(x => x.ListaFuncionarioNaEscala.Any(y => y.Id == funcionario.Id)).Count()
                        </td>
                    </tr>
                }

            </thead>
        </table>
    </div>

    <div class="col-12">
        <div id="calendar"></div>
    </div>
</div>

<script>
    let listaEventos = carregarDados();
    let calendar = gerarCalendario();

    function carregarDados() {
        let listaEventos = [];

        let tabelaHome = document.getElementById("eventos");
        let trElem = tabelaHome.getElementsByTagName("tr");
        for (let tr of trElem) {
            let tdElems = tr.getElementsByTagName("td");
            let eventoObjeto = {
                id: tdElems[0].innerText,
                title: tdElems[1].innerText,
                start: tdElems[2].innerText,
                color: obterCorPorFuncionario(tdElems[0].innerText) // Obtém cor para o funcionário com base no ID
            }
            listaEventos.push(eventoObjeto);
        }

        let tabelaFeriado = document.getElementById("eventosFeriados");
        let trFeriado = tabelaFeriado.getElementsByTagName("tr");
        for (let tr of trFeriado) {
            let tdElems = tr.getElementsByTagName("td");
            let eventObj = {
                id: tdElems[0].innerText,
                title: tdElems[1].innerText,
                start: tdElems[2].innerText,
                color: 'red'
            }
            listaEventos.push(eventObj);
        }

        return listaEventos;
    }

    function obterCorPorFuncionario(funcionarioId) {
        let mapeamentoCor = {
            "1": "blue",
            "2": "green",
            "3": "purple",
            "4": "black",
            "5": "ORANGE",
        };
        return mapeamentoCor[funcionarioId] || 'gray'; 
    }

    // Função para inicializar o calendário
    function gerarCalendario() {
        var calendarEl = document.getElementById('calendar');

        let calendar = new FullCalendar.Calendar(calendarEl, {
            editable: true,
            locale: 'pt-br',
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            events: listaEventos,
            eventColor: function (arg) {
                return arg.event.extendedProps.color;
            },
        });

        calendar.render();

        return calendar;
    }

    // Função para atualizar a contagem de homes na tabela
    // Função para atualizar a contagem de homes na tabela
    function atualizarContagemHomes(colaboradorId, incremento) {
        let homesTd = document.querySelector(`#homes-${colaboradorId}`);
        if (homesTd) {
            let contagemAtual = parseInt(homesTd.innerText);
            let novaContagem = incremento ? contagemAtual + 1 : contagemAtual - 1;
            homesTd.innerText = novaContagem >= 0 ? novaContagem : 0; // Assegura que a contagem não seja negativa
        }
    }

    // Atualização das funções dateClick e eventClick para chamar atualizarContagemHomes corretamente
    calendar.on('dateClick', function (info) {
        let colaboradorId = prompt("Informe o ID do colaborador:");
        if (colaboradorId) {
            let dataEvento = info.dateStr;
            let eventoId = colaboradorId + '-' + dataEvento + '-' + new Date().getTime(); // Adiciona precisão de milissegundos para ID único
            let novoEvento = {
                id: eventoId,
                title: document.querySelector('#colaborador-' + colaboradorId).textContent,
                start: dataEvento,
                color: obterCorPorFuncionario(colaboradorId)
            };
            listaEventos.push(novoEvento);
            calendar.addEvent(novoEvento);
            atualizarContagemHomes(colaboradorId, true); // Verdadeiro para incrementar
        }
    });

    calendar.on('eventClick', function (info) {
        if (confirm("Deseja realmente remover este evento?")) {
            let eventoId = info.event.id;
            let colaboradorId = eventoId.split('-')[0];
            listaEventos = listaEventos.filter(evento => evento.id !== eventoId);
            info.event.remove();
            atualizarContagemHomes(colaboradorId, false); // Falso para decrementar
        }
    })
</script>
